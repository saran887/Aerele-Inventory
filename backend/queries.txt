/*
 * SQLite Queries for Aerele Inventory System
 * 
 * This file contains all the SQL queries used in the application,
 * organized by functionality.
 */

-- =============================================
-- DATABASE SCHEMA
-- =============================================

-- Product Table
CREATE TABLE IF NOT EXISTS product (
    product_id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    total_quantity INTEGER,
    location_id TEXT,
    FOREIGN KEY (location_id) REFERENCES location (location_id)
);

-- Location Table
CREATE TABLE IF NOT EXISTS location (
    location_id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    address TEXT
);

-- Product Movement Table
CREATE TABLE IF NOT EXISTS product_movement (
    movement_id TEXT PRIMARY KEY,
    timestamp TEXT DEFAULT CURRENT_TIMESTAMP,
    from_location TEXT,
    to_location TEXT,
    product_id TEXT NOT NULL,
    qty INTEGER NOT NULL,
    FOREIGN KEY (from_location) REFERENCES location (location_id),
    FOREIGN KEY (to_location) REFERENCES location (location_id),
    FOREIGN KEY (product_id) REFERENCES product (product_id)
);

-- =============================================
-- PRODUCT QUERIES
-- =============================================

-- Get all products
SELECT product_id, name, description, total_quantity, location_id
FROM product;

-- Get a specific product
SELECT product_id, name, description, total_quantity, location_id
FROM product
WHERE product_id = ?;

-- Check if product exists
SELECT product_id FROM product WHERE product_id = ?;

-- Insert new product
INSERT INTO product (product_id, name, description, total_quantity, location_id)
VALUES (?, ?, ?, ?, ?);

-- Update product
UPDATE product
SET name = ?, description = ?, total_quantity = ?, location_id = ?
WHERE product_id = ?;

-- Delete product
DELETE FROM product WHERE product_id = ?;

-- =============================================
-- LOCATION QUERIES
-- =============================================

-- Get all locations
SELECT location_id, name, address
FROM location;

-- Get a specific location
SELECT location_id, name, address
FROM location
WHERE location_id = ?;

-- Check if location exists
SELECT location_id FROM location WHERE location_id = ?;

-- Insert new location
INSERT INTO location (location_id, name, address)
VALUES (?, ?, ?);

-- Update location
UPDATE location
SET name = ?, address = ?
WHERE location_id = ?;

-- Delete location
DELETE FROM location WHERE location_id = ?;

-- =============================================
-- PRODUCT MOVEMENT QUERIES
-- =============================================

-- Get all movements
SELECT movement_id, timestamp, from_location, to_location, product_id, qty
FROM product_movement;

-- Get a specific movement
SELECT movement_id, timestamp, from_location, to_location, product_id, qty
FROM product_movement
WHERE movement_id = ?;

-- Check if movement exists
SELECT movement_id FROM product_movement WHERE movement_id = ?;

-- Insert new movement
INSERT INTO product_movement (movement_id, timestamp, from_location, to_location, product_id, qty)
VALUES (?, ?, ?, ?, ?, ?);

-- Update movement
UPDATE product_movement
SET product_id = ?, qty = ?, from_location = ?, to_location = ?
WHERE movement_id = ?;

-- Delete movement
DELETE FROM product_movement WHERE movement_id = ?;

-- =============================================
-- INVENTORY CALCULATION QUERIES
-- =============================================

-- Calculate inbound quantity to a location
SELECT COALESCE(SUM(qty), 0) as total_in
FROM product_movement
WHERE product_id = ? AND to_location = ?;

-- Calculate outbound quantity from a location
SELECT COALESCE(SUM(qty), 0) as total_out
FROM product_movement
WHERE product_id = ? AND from_location = ?;

-- =============================================
-- REPORT QUERIES
-- =============================================

-- Get all products for report
SELECT product_id, name FROM product;

-- Get all locations for report
SELECT location_id, name FROM location;

-- Get inbound quantities per product/location
SELECT product_id, to_location as location_id, SUM(qty) as in_qty
FROM product_movement
WHERE to_location IS NOT NULL
GROUP BY product_id, to_location;

-- Get outbound quantities per product/location
SELECT product_id, from_location as location_id, SUM(qty) as out_qty
FROM product_movement
WHERE from_location IS NOT NULL
GROUP BY product_id, from_location;

-- =============================================
-- EXAMPLE COMPLEX QUERIES
-- =============================================

-- Get stock level for all products at all locations in one query
SELECT 
    p.product_id,
    p.name as product_name,
    l.location_id,
    l.name as location_name,
    (
        COALESCE((
            SELECT SUM(pm.qty) 
            FROM product_movement pm 
            WHERE pm.product_id = p.product_id 
            AND pm.to_location = l.location_id
        ), 0) -
        COALESCE((
            SELECT SUM(pm.qty) 
            FROM product_movement pm 
            WHERE pm.product_id = p.product_id 
            AND pm.from_location = l.location_id
        ), 0)
    ) as current_stock
FROM 
    product p
CROSS JOIN 
    location l
HAVING 
    current_stock <> 0;

-- Track movement history for a specific product
SELECT 
    pm.movement_id,
    pm.timestamp,
    l_from.name as from_location_name,
    l_to.name as to_location_name,
    pm.qty
FROM 
    product_movement pm
LEFT JOIN 
    location l_from ON pm.from_location = l_from.location_id
LEFT JOIN 
    location l_to ON pm.to_location = l_to.location_id
WHERE 
    pm.product_id = ?
ORDER BY 
    pm.timestamp;